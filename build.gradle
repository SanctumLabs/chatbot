buildscript {
    ext.kotlin_version = '1.1.51'
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0-alpha01'
        classpath 'com.google.gms:google-services:3.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


/**
 * Gets the Chatbot service account email gradle.properties file, Ensure that you have a
 * gradle.properties file in root project directory
 * */
def getChatBotServiceAccountKey = { ->
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("CHATBOT_SERVICE_ACCOUNT_EMAIL")
    } catch (Exception ignored) {
        return ""
    }
}

/**
 * Gets the Fabric API key from gradle.properties file
 * */
def getFabricApiKey = { ->
    try{
        Properties properties = new Properties()
        properties.load(new FileInputStream("gradle.properties"))
        return properties.getProperty("FABRIC_API_KEY")
    }catch (Exception ignored){
        return ""
    }
}

ext {
    keystorePropertiesFile = rootProject.file("keystores/keystore.properties")
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    // configurations to send to Play Store for automated publishing
    pk12KeyFile = rootProject.file("keystores/chatbot_publish_key.p12")
    pJsonKeyFile = rootProject.file("keystores/chatbot_publish_key.json")
    serviceAccountEmail = getChatBotServiceAccountKey()
    fabricApiKey = getFabricApiKey()

    /**
     * Set this to true to create two separate APKs instead of one:
     *   - An APK that only works on ARM devices
     *   - An APK that only works on x86 devices
     * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
     * the correct one based on the CPU architecture of their device.
     */
    enableSeparateBuildPerCPUArchitecture = true

    // If true, also generate a universal APK
    enableUniversalApk = true

    // ABI codes
    abiCodes = ["armeabi-v7a": 1, "x86": 2, "mips": 3, "x86_64": 4, "armeabi": 5, "arm64-v8a": 6]

    // For per-density APKs, create a similar map like this:
    densityCodes = ["ldpi": 1, 'mdpi': 2, 'hdpi': 3, 'xhdpi': 4, "xxhdpi": 5, "xxxhdpi": 6]

    // -------------------- DEPENDENCIES --------------------

    // support lib
    supportLibVersion = "26.1.0"

    // multidex
    multiDexEnabledVersion = "1.0.2"

    // Dependency Injection
    javaxAnnotationVersion = "1.0"
    daggerVersion = "2.11"
    javaxAnnotationVersion = "1.0"
    javaxInjectVersion = "1"

    // -------------------- TEST DEPENDENCIES -----------------------
    jUnitVersion = "4.12"
    espressoVersion = "3.0.0"
    truthVersion = "0.35"
    mockitoVersion = "2.7.1"
    mockWebServerVersion = "3.6.0"
    robolectricVersion = "3.3.2"
    testRunnerVersion = "1.0.0"
    espressoContribVersion = "2.0"
    assertJVersion = "3.6.2"
    spekVersion = "1.1.2"
    mockitoKotlinVersion = "1.4.0"
    hamcrestVersion = "1.3"
}
